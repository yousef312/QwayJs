{"version":3,"file":"qway.umd.min.js","sources":["../src/qway.js?commonjs-entry","../src/qway.js"],"sourcesContent":["import { getDefaultExportFromCjs } from \"\u0000commonjsHelpers.js\";\nimport { __require as requireQway } from \"C:\\\\Users\\\\a\\\\Desktop\\\\fff\\\\QuiwayJs\\\\src\\\\qway.js\";\nvar qwayExports = requireQway();\nexport { qwayExports as __moduleExports };\nexport default /*@__PURE__*/getDefaultExportFromCjs(qwayExports);","/**\r\n * Qway.js 3.0.0\r\n *\r\n * Copyright 2018, yousef neji\r\n * Licensed under the MIT license.\r\n */\r\n/**\r\n * @tutorial introduction\r\n * there is so many types of shortcut we offer:\r\n *  - `shortcut` : ordinary known one\r\n *  - `combo` : used mostly in games like cheat code a string you must tap very quickly and once\r\n * you fully tap a function that going to execute at the end resulting in a completed mission\r\n * or something like that\r\n *  - `holdAction` : occurs when you hold a key for a duration resulting in a function that execute \r\n * at the end.\r\n * \r\n * the syntax to bind each type deffers like so:\r\n *  to bind a normal shortcut you must pass a string constraint a keys list seperated by a `+` sign\r\n *  to bind a combo you must pass a string of keys list seperated by `,` comma\r\n *  to bind a holdAction you pass a string in this form ` (key) => (duration) `. the spaces added only for clarity also the parenthese\r\n *  the syntax of a hold action constrained out of a key then `=>` then the duration of holding in milliseconds.\r\n * \r\n * \r\n * Should not that not all shortcut will be allowed some shortcut could be used by default in the used browser\r\n * all thought the system will try to block this default one but some of them may still work like ctrl+t which open\r\n * new tab and other ones.\r\n * \r\n * \r\n * Tricks:\r\n * here is a simple trick, what to do if I just want to stop a default keybinding like (ctrl+r) that does\r\n * the window reload, you can simply assing to this shortcut a enmpty callback like that `qway.bind('ctrl+r')` you don't really\r\n * have to pass a callback as a qway empty optimal generated callback will be there for you.\r\n */\r\n(function(root,Qway){\r\n    'uses strict';\r\n    if(typeof define === 'function' && define.amd) {\r\n\t\tdefine([], build);\r\n\t}else if(typeof module === 'object' && module.exports) {\r\n        module.exports = Qway();\r\n\t}else{\r\n        root.Qway = Qway();\r\n    }\r\n}(this,function(){\r\n\r\n    // fixed bug in version 2.0.0\r\n    // the library stop all my other callbacks to ceratin event such as mousedown event\r\n    // mouse up event\r\n    // and window blur event\r\n\r\n    // for major support those steps must be implimented\r\n    if([].findIndex === undefined)\r\n    {\r\n        Array.prototype['findIndex'] = function(callback){\r\n            var res = -1;\r\n            for (let i = 0; i < this.length; i++) {\r\n                const element = this[i];\r\n                out = callback(element,i,this);\r\n                if(out === true)\r\n                {\r\n                    res = i;\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            return res;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Interface allows to handle setting up shortcut and combo keys for you app game or even\r\n     * website very easily.\r\n     * @author Yousef Neji\r\n     * @param {boolean} duplicates default false, whether more then one callback for the same\r\n     * shortcut allowed or not!\r\n     */\r\n    var qway = function Qway( duplicates = false ){\r\n\r\n        var _this = this;\r\n        \r\n        /**\r\n         * Holds the defined shortcuts list, to add new shortcut use `bind`.\r\n         * @type {Array}\r\n         */\r\n        this.shortcutslist = [];\r\n\r\n        /**\r\n         * Holds the defined combo list, to new combo use `bind`.\r\n         * @type {Array}\r\n         */\r\n        this.combo = [];\r\n\r\n        /**\r\n         * Holds the callback to be executing when pressing certain key for a given duration\r\n         * @type {Array}\r\n         */\r\n        this.holdingActions = [];\r\n\r\n        /**\r\n         * Flag determine whether assinging more then one callback to the same shortcut\r\n         * is allowed or not\r\n         * @type {boolean}\r\n         */\r\n        this.duplicates = duplicates;\r\n\r\n        /**\r\n         * Holds the different allowed keys to form the sortcut\r\n         * @type {Array}\r\n         */\r\n        this.KEYS = ['command'/*For Mac OS*/,'ctrl','shift','alt','altGraph','capslock','tab','backspace','enter','meta',\r\n            'space','escape','pageup','pagedown','home','insert','delete','end','arrowup','arrowdown','arrowleft',\r\n            \"arrowright\",'1','2','3','4','5','6','7','8','9','0','a','b','c','d','e','f','g','h','i','j','k','l','m',\r\n            'n','o','p','q','r','s','t','u','v','w','x','y','z','*','f1','f2','f3','f4','f5','f6','f7','f8','f9','f10','f11'];\r\n            \r\n        \r\n        /**\r\n         * Get or set shortcut activation state\r\n         * @type {boolean}\r\n         */\r\n        this.shortcutActivated = true;\r\n\r\n        /**\r\n         * Get or set combo activation state\r\n         * @type {boolean}\r\n         */\r\n        this.comboActivated = true;\r\n\r\n        /**\r\n         * Flag determine whether the user currently in interactive mode or not,\r\n         * must not get changed!\r\n         * @readonly\r\n         * @type {boolean}\r\n         */\r\n        this.intercativeMode = false;\r\n\r\n        /**\r\n         * Used in the interactive mode to hold the shortcut that going to be builded\r\n         * @type {Array<Array>}\r\n         */\r\n        this.toBuild = [[],[]];\r\n        \r\n        /**\r\n         * QEF or Qway Escape Function is the rescue function when ever a shortcut was created without it callback.\r\n         * @readonly\r\n         * @type {function}\r\n         */\r\n        this.QEF = function(){};\r\n\r\n        /**\r\n         * Holds the keys states whether they are pressed or not.\r\n         * @readonly\r\n         */\r\n        this.keysuite = {};\r\n\r\n        // packing up\r\n        window.addEventListener('keydown',function(e){\r\n            _this.handleKeydown.call(_this,e)\r\n        });\r\n        window.addEventListener('keyup',function(e){\r\n            _this.handleKeyup.call(_this,e)\r\n        });\r\n        window.addEventListener('blur',function(){\r\n            _this.blur.call(_this);\r\n        })\r\n    }\r\n\r\n    qway.prototype = {\r\n        /**\r\n         * Approve binding the user created shortcut in interactive mode.\r\n         * @method Qway#applyReplace\r\n         * @returns {string} the shortcut that currently was approved.\r\n         */\r\n        approve : function(){\r\n            if(this.toBuild[0].length === 0) return;\r\n            \r\n            var shortcut = this.toBuild[0].join('+');\r\n            var callback = this.toBuild[1][1];\r\n\r\n            this.bind(shortcut,callback);\r\n\r\n            this.toBuild = [[],[]];\r\n            return shortcut;\r\n        },\r\n        /**\r\n         * Approve replacing the given `callback` shortcut by the user defined one.\r\n         * @method Qway#approveToReplace\r\n         * @returns {boolean} true if replacing went well or false otherwise.\r\n         */\r\n        approveToReplace : function(){\r\n            if(this.toBuild[0].length === 0) return;\r\n\r\n            var shortcut = this.toBuild[0];\r\n            var callback = this.toBuild[1][1];\r\n\r\n            var obj = this.shortcutslist.find((a)=> a.callback.toString() === callback.toString());\r\n            let exist = this.check(shortcut.join('+')) !== -1;\r\n\r\n            if(obj !== undefined && !exist)\r\n            {\r\n                this.unbind(obj.shortcut.join('+'),obj.callback);\r\n                var res = this.bind(shortcut.join('+'),this.toBuild[1][1]);\r\n\r\n                this.toBuild = [[],[]];\r\n                this.intercativeMode = false;\r\n                return res === false ? res : shortcut;\r\n            }\r\n            this.toBuild = [[],[]];\r\n            this.intercativeMode = false;\r\n            return false;\r\n\r\n        },\r\n        /**\r\n         * Abort the interactive process emptying the system from the temporary saved \r\n         * user interaction data(shortcut), invoked internally by the system.\r\n         * @method Qway#abort\r\n         */\r\n        abort : function(){\r\n            this.intercativeMode = false;\r\n            this.toBuild = [[],[]];\r\n        },\r\n        /**\r\n         * Reset the progress of the combo with the given string and callback.\r\n         * @method Qway#resetCombo\r\n         * @param {string} combo \r\n         * @param {function} callback (optional)\r\n         */\r\n        resetCombo : function(combo,callback){\r\n            combo = this.supervise(combo).join(',');\r\n\r\n            var index = this.combo.findIndex(a=> a.combo.join(',') === combo && (callback === undefined || (callback !== undefined && a.callback.toString() === callback.toString())));\r\n            \r\n            if(index !== -1)\r\n            {\r\n                this.combo[index].progress = '';\r\n                this.combo[index].done = false;\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n        /**\r\n         * Toggle the activation state of a combo with the given string and callback\r\n         * @method Qway#toggleCombo\r\n         * @param {string} combo \r\n         * @param {function} callback (optional)\r\n         * @param {boolean} state (optional) if you want to force true or false\r\n         * @returns {boolean} true if toggling went well or false otherwise\r\n         */\r\n        toggleCombo : function(combo,callback,state){\r\n            combo = this.supervise(combo).join(',');\r\n\r\n            var index = this.combo.findIndex(a=> a.combo.join(',') === combo && (callback === undefined || (callback !== undefined && a.callback.toString() === callback.toString())));\r\n            \r\n            if(index !== -1)\r\n            {\r\n                if(typeof state === 'boolean')\r\n                {\r\n                    this.combo[index].active = state;\r\n                }\r\n                else\r\n                {\r\n                    this.combo[index].active = !this.combo[index].active;\r\n                }\r\n                \r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n        /**\r\n         * Toggle the activation state of a shortcut with the given string and callback\r\n         * @method Qway#toggleCombo\r\n         * @param {string} combo \r\n         * @param {function} callback (optional)\r\n         * @param {boolean} state (optional) if you want to force true or false\r\n         * @returns {boolean} true if toggling went well or false otherwise\r\n         */\r\n        toggleShortcut : function(shortcut,callback,state){\r\n            shortcut = this.supervise(shortcut).join('+');\r\n\r\n            var index = this.shortcutslist.findIndex(a=> a.shortcut.join('+') === shortcut && (callback === undefined || (callback !== undefined && callback.toString() === a.callback.toString())));\r\n            \r\n            if(index !== -1)\r\n            {\r\n                if(typeof state === 'boolean')\r\n                {\r\n                    this.shortcutslist[index].active = state;\r\n                }\r\n                else\r\n                {\r\n                    this.shortcutslist[index].active = !this.shortcutslist[index].active;\r\n                }\r\n                \r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n        /**\r\n         * Replace the shortcut of the given callback to new one\r\n         * @method Qway#replace\r\n         * @param {function} callback \r\n         * @param {string} shortcut \r\n         * @returns {boolean}  true if shortcut replaced successfully or false otherwise\r\n         */\r\n        replace : function(callback,shortcut){\r\n            var index = this.shortcutslist.find((a)=> a.callback !== undefined && a.callback.toString() === callback.toString());\r\n\r\n            if(index !== undefined)\r\n            {\r\n                this.unbind(index.shortcut.join('+'),index.callback);\r\n                return this.bind(shortcut,callback);\r\n            }\r\n            return false\r\n        },\r\n        /**\r\n         * Interactivly getting the shortcut through the user clicks, this is usefull when\r\n         * designing the settings of your app, allowing the user to set up his own shortcut.\r\n         * @method Qway#getFromUser\r\n         * @param {number} shortcutLength the shortcut accepeted key count\r\n         * @param {function} callback \r\n         * @param {function} func1 this function will be excuted each time the user press or release\r\n         * a key while in creating the shortcut, it helps keep supervising the events!\r\n         */\r\n        getFromUser : function(shortcutLength,callback,func1){\r\n            this.intercativeMode = true;\r\n            this.toBuild[1].push(shortcutLength,callback,func1);\r\n        },\r\n        /**\r\n         * Stop the interactive mode, getting the shortcut from the user\r\n         * @method Qway#stopGettingFromUser\r\n         */\r\n        stopGettingFromUser : function(){\r\n            this.intercativeMode = false;\r\n            this.toBuild = [[],[]];\r\n        },\r\n        /**\r\n         * Invoked internally to cancel a shortcut\r\n         * @method Qway#handleKeyup\r\n         * @param {KeyboardEvent} e \r\n         */\r\n        handleKeyup : function(e){\r\n            var key = e.key.toLowerCase();\r\n            key = key === ' ' ? 'space' : key.trim();\r\n            key = key === 'control' ? 'ctrl' : key;\r\n            this.keysuite[key] = false;\r\n\r\n            if(this.intercativeMode === false)\r\n            {\r\n                if(this.shortcutslist.length !== 0)\r\n                {\r\n                    if(this.shortcutActivated === false) return;\r\n                    \r\n                    this.shortcutslist.forEach((item)=>{\r\n                        \r\n                        if(item.shortcut.indexOf(key) !== -1)\r\n                        {\r\n                            var start = item.shortcut.indexOf(key);\r\n                            \r\n                            for (let i = start; i < item.shortcut.length; i++) {\r\n                                item.progress[i] = false;\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    if(this.holdingActions.length !== 0)\r\n                    {\r\n                        this.holdingActions.forEach(item=>{\r\n                            if(item.key === key && item.timeout !== null)\r\n                            {\r\n                                clearTimeout(item.timeout);\r\n                                item.timeout = null;\r\n                            }\r\n                        })\r\n                    }\r\n                    \r\n                    \r\n                }\r\n                \r\n                \r\n                if( this.combo.length !== 0 && this.comboActivated === true)\r\n                {\r\n                    // this is a figure for the content of the combo arrau to help visualize\r\n                    // what happenings\r\n                    //var obj = {\r\n                    //    progress : '',\r\n                    //    combo : combo,\r\n                    //    callback : callback,\r\n                    //    timing : timing,\r\n                    //    timeout : null,\r\n                    //    active : true\r\n                    //}\r\n\r\n                    this.combo.forEach((item,j)=>{\r\n                        \r\n                        if( item.combo.indexOf(key) !== -1 && !item.done && item.active === true)\r\n                        {\r\n                            e.preventDefault();\r\n\r\n                            // first we increase the progress by the new `key`\r\n                            item.progress += key;\r\n\r\n                            // we clear the old execution timeout\r\n                            if(item.timeout !== null)\r\n                            {\r\n                                clearTimeout(item.timeout);\r\n                            }\r\n\r\n                            if(item.progress === item.combo.join(''))\r\n                            {\r\n                                // means we get the right string\r\n                                item.done = true;\r\n                            }\r\n\r\n                            // now we execute the function \r\n                            item.callback(item);\r\n                            \r\n                            if(!item.done)\r\n                            {\r\n                                item.timeout = setTimeout(function(){\r\n                                    item.progress = '';\r\n                                    item.callback(item);\r\n                                },item.timing);\r\n                            }\r\n                            \r\n                            \r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            else\r\n            {\r\n                // the interactive mode\r\n\r\n                var index = this.toBuild[0].findIndex((a)=> a === key);\r\n                if(index !== -1)\r\n                {\r\n                    e.preventDefault();\r\n                    this.toBuild[0].splice(index,1);\r\n                    this.toBuild[1][2](this.toBuild[0]);\r\n                }\r\n\r\n            }\r\n        },\r\n        /**\r\n         * Invoked internally by the library while performing the shortcut\r\n         * @method Qway#handleKeydown\r\n         * @param {KeyboardEvent} e \r\n         */\r\n        handleKeydown : function(e){\r\n            var key = e.key.toLowerCase();\r\n            key = key === ' ' ? 'space' : key.trim();\r\n            key = key === 'control' ? 'ctrl' : key;\r\n            this.keysuite[key] = true;\r\n            \r\n            if(this.intercativeMode === false)\r\n            {\r\n                if(this.shortcutslist.length !== 0 && this.shortcutActivated === true)\r\n                {\r\n                    this.shortcutslist.forEach(item=>{\r\n                        if(item.active === false) return;\r\n\r\n                        if(item.shortcut[0] === '*')\r\n                        {\r\n                            e.preventDefault();\r\n                            item.progress[0] = true;\r\n                        }\r\n                        else if(item.progress.indexOf(true) !== -1 && \r\n                        item.shortcut[item.progress.lastIndexOf(true) + 1] == '*')\r\n                        {\r\n                            e.preventDefault();\r\n                            item.progress[item.progress.lastIndexOf(true)+1] = true;\r\n                        }\r\n                        \r\n                        //otherwise\r\n                        if(item.shortcut.indexOf(key) !== -1)\r\n                        {\r\n                            e.preventDefault();\r\n                            if(item.progress[item.shortcut.indexOf(key)-1] === true || \r\n                            item.progress[item.shortcut.indexOf(key) - 1] === undefined)\r\n                            {\r\n                                item.progress[item.shortcut.indexOf(key)] = true;\r\n                            }\r\n                        }\r\n\r\n                        if(item.progress[item.progress.length - 1] === true)\r\n                        {\r\n                            e.preventDefault();\r\n                            item.progress[item.progress.length - 1] = false\r\n                            item.callback();\r\n                        }\r\n                    });\r\n                }\r\n\r\n                if(this.holdingActions.length !== 0 && this.shortcutActivated === true)\r\n                {\r\n                    for (let i = 0; i < this.holdingActions.length; i++) {\r\n                        const element = this.holdingActions[i];\r\n                        \r\n                        if(key === element.key && element.timeout === null)\r\n                        {\r\n                            e.preventDefault();\r\n                            this.holdingActions[i].timeout = setTimeout(element.callback,element.duration);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else if(this.intercativeMode === true)\r\n            {\r\n                // first we check if key is already in the shortcut or not\r\n                var alreadyThere = this.toBuild[0].findIndex((a)=> a === key);\r\n                if(alreadyThere === -1)\r\n                {\r\n                    e.preventDefault();\r\n                    // now we need to handle creating the shortcut through the user clicks\r\n                    this.toBuild[0].push(key);\r\n                    this.toBuild[1][2](this.toBuild[0]);\r\n\r\n                    if(this.toBuild[0].length === this.toBuild[1][0])\r\n                    {\r\n                        // means if shortcut length is enough\r\n                        // then stop enlarging it and record it\r\n                        this.intercativeMode = false;\r\n                        this.toBuild[1][2](this.toBuild[0],true);\r\n                    }\r\n                }\r\n                \r\n            }\r\n        },\r\n        /**\r\n         * Bind new short cut with a callback, mainly use comma seperated list of keys to create a combo or \r\n         * seperated with `+` sign for ordinary shortcut.\r\n         * @method Qway#bind\r\n         * @param {string} shortcut the shortcut to bind\r\n         * @param {function} callback the callback to be excuted when shortcut performed, if none was passed then a default callback will be assigned\r\n         * @param {number} timing optional parameter defined the minimum time between key presses\r\n         * so the shortcut is performed!(only for combos)\r\n         */\r\n        bind : function( shortcut = 'ctrl+q' , callback , timing=500){\r\n            //do the check\r\n            if(typeof shortcut !== 'string')\r\n            {\r\n                console.warn('Qway warn you:\\nthe given shortcut not string!');\r\n                return;\r\n            }\r\n            callback = typeof callback !== 'function' ? this.QEF : callback;\r\n            timing = typeof timing !== 'number' ? 500 : timing;\r\n            \r\n            //take apart the shortcut and anlyse it \r\n            if(this.KEYS.indexOf(shortcut) !== -1)\r\n            {\r\n                // means the shortcut is constrained out of one single key\r\n                var obj = {\r\n                    shortcut : [shortcut],\r\n                    progress : [false],\r\n                    callback : callback,\r\n                    active : true\r\n                }\r\n                var index = this.check(shortcut);\r\n                if(index === -1 || this.duplicates)\r\n                {\r\n                    this.shortcutslist.push(obj);   \r\n                    return true    \r\n                }\r\n                return false\r\n            }\r\n            else if(shortcut.indexOf('+') !== -1)\r\n            {\r\n                var shortcuti = this.supervise(shortcut);\r\n                if(shortcut !== false)\r\n                {\r\n                    var obj = {\r\n                        shortcut : shortcuti,\r\n                        progress : new Array(shortcuti.length).fill(false,0,shortcuti.length),\r\n                        callback : callback,\r\n                        active : true\r\n                    };\r\n\r\n                    var index = this.check(shortcuti.join('+'));\r\n                    if(index === -1 || this.duplicates)\r\n                    {\r\n                        this.shortcutslist.push(obj);      \r\n                        return true \r\n                    }\r\n                    return false\r\n                }\r\n                return false\r\n            }\r\n            else if(shortcut.indexOf(',') !== -1)\r\n            {\r\n                var combo = this.supervise(shortcut);\r\n                \r\n                \r\n\r\n                if(combo !== false)\r\n                {\r\n                    var obj = {\r\n                        progress : '',\r\n                        combo : combo,\r\n                        done : false,\r\n                        callback : callback,\r\n                        timing : timing,\r\n                        timeout : null,\r\n                        active : true\r\n                    }\r\n                    var index = this.check(combo.join(','));\r\n                    if(index === -1 || this.duplicates)\r\n                    {\r\n                       this.combo.push(obj);   \r\n                       return true    \r\n                    }\r\n                    return false\r\n                }\r\n                return false;\r\n            }\r\n            else if(shortcut.indexOf('=>') !== -1)\r\n            {\r\n                var shortcuti = this.supervise(shortcut);\r\n                \r\n                if(shortcut !== false)\r\n                {\r\n                    var obj = {\r\n                        key : shortcuti[0],\r\n                        duration : shortcuti[1],\r\n                        callback : callback,\r\n                        timeout : null\r\n                    }\r\n                    var index = this.check(shortcut);\r\n                    if(index === -1 || this.duplicates)\r\n                    {\r\n                        this.holdingActions.push(obj);\r\n                        return true\r\n                    }   \r\n                    return false\r\n                }\r\n                return false\r\n\r\n            }\r\n            else\r\n            {\r\n                return false;\r\n            }\r\n\r\n        },\r\n        /**\r\n         * Remove the shortcut associated to the given `callback`, do not pass any parameter to empty\r\n         * the whole system callback, shortcuts combo and also hold actions.\r\n         * more options : \r\n         *  - pass `,` as the shortcut and `all` as the callback(or undefined) to delete all the combo\r\n         *  - pass `+` as the shortcut and `all` as the callback(or undefined) to delete all the shortcuts\r\n         *  - pass `=>` as the shortcut and `all` as the callback(or undefined) to delete all the holding actions\r\n         * \r\n         * @method Qway#unbind\r\n         * @param {string} shortcut \r\n         * @param {function} callback \r\n         * @returns {boolean} true if shortcut successfully unbinded or false otherwise\r\n         */\r\n        unbind : function( shortcut , callback ){\r\n            \r\n            if(shortcut === undefined)\r\n            {\r\n                // passing undefined will empty the whole system\r\n                // all the defined shortcut holdingActions and combo\r\n                this.shortcutslist = [];\r\n                this.holdingActions = [];\r\n                this.combo = [];\r\n                return;\r\n            }\r\n\r\n            var findANDdeleted = false;\r\n            if(this.KEYS.indexOf(shortcut) !== -1)\r\n            {\r\n                for (let i = this.shortcutslist.length - 1; i > -1; i--) {\r\n                    const element = this.shortcutslist[i];\r\n                    \r\n                    if(((callback !== undefined && element.callback.toString() === callback.toString())\r\n                    || callback === undefined) && element.shortcut.join('') === shortcut)\r\n                    {\r\n                        this.shortcutslist.splice(i,1);\r\n                        findANDdeleted = true;\r\n                    } \r\n                }\r\n            }\r\n            else if(shortcut.indexOf('+') !== -1)\r\n            {\r\n                if(callback === 'all' || callback === undefined && shortcut === '+')\r\n                {\r\n                    this.shortcutslist = [];\r\n                    findANDdeleted = true;\r\n                }\r\n                else\r\n                {\r\n                    shortcut = this.supervise(shortcut).join('+');\r\n\r\n                    for (let i = this.shortcutslist.length - 1; i > -1; i--) {\r\n                        const element = this.shortcutslist[i];\r\n\r\n                        if(element.shortcut.join('+') === shortcut &&\r\n                        ((callback !== undefined &&\r\n                            element.callback.toString() === callback.toString()) || (\r\n                                callback === undefined\r\n                            )))\r\n                        {\r\n                            this.shortcutslist.splice(i,1);\r\n                            findANDdeleted = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else if(shortcut.indexOf(',') !== -1)\r\n            {\r\n                if(callback === 'all' || callback === undefined && shortcut === ',')\r\n                {\r\n                    this.combo = [];\r\n                    findANDdeleted = true;\r\n                }\r\n                else\r\n                {\r\n                    shortcut = this.supervise(shortcut).join(',');\r\n\r\n                    for (let i = this.combo.length - 1; i > -1; i--) {\r\n                        const combo = this.combo[i];\r\n                        if(combo.combo.join(',') === shortcut &&\r\n                        (( callback !== undefined && \r\n                            combo.callback.toString() === callback.toString()) ||\r\n                            (\r\n                                callback === undefined\r\n                            )\r\n                        ))\r\n                        {\r\n                           this.combo.splice(i,1);\r\n                            findANDdeleted = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else if(shortcut.indexOf('=>') !== -1)\r\n            {\r\n                if(callback === 'all' || callback === undefined && shortcut === '=>')\r\n                {\r\n                    this.holdingActions = [];\r\n                    findANDdeleted = true;\r\n                }\r\n                else\r\n                {\r\n                    shortcut = this.supervise(shortcut);\r\n\r\n                    for (let i = this.holdingActions.length - 1; i > -1; i--) {\r\n                        const action = this.holdingActions[i];\r\n\r\n                        if(action.key === shortcut[0] && action.duration === shortcut[1] &&\r\n                            ((\r\n                                callback !== undefined &&\r\n                                action.callback.toString() === callback.toString()) ||\r\n                            (\r\n                                callback === undefined\r\n                            )\r\n                            ))\r\n                        {\r\n                            this.holdingActions.splice(i,1);\r\n                            findANDdeleted = true;\r\n                        }\r\n                    }    \r\n                }\r\n                \r\n            }\r\n\r\n            return findANDdeleted;\r\n        },\r\n        /**\r\n         * Check whether shortcut/keysmap/holdAction already under use or not!\r\n         * @method Qway#check\r\n         * @param {string} shortcut \r\n         * @returns {number}\r\n         */\r\n        check : function(shortcut){\r\n\r\n            if(shortcut.indexOf('+') !== -1)\r\n            {\r\n                return this.shortcutslist.findIndex((a)=> a !== undefined && a.shortcut.join('+') === shortcut);\r\n            }\r\n            else if(shortcut.indexOf(',') !== -1)\r\n            {\r\n                return this.combo.findIndex((a)=> a !== undefined && a.combo.join(',') === shortcut);\r\n            }\r\n            else if(shortcut.indexOf('=>') !== -1)\r\n            {\r\n                return this.holdingActions.findIndex((a)=> a !== undefined && a.key === shortcut);\r\n            }\r\n            else\r\n            {\r\n                return this.shortcutslist.findIndex((a)=> a !== undefined && a.shortcut[0] === shortcut);\r\n            }\r\n        },\r\n        /**\r\n         * Does check a shortcut whether is proper form and can be used or, a proper form shortcut\r\n         * contains only existing system keys, and only one type of seperator so it's type can be identified\r\n         * which could be:\r\n         *  - `shortcut` : if the keys seperator is `+` sign\r\n         *  - `combo` : if the keys seperator is `,`  comma\r\n         *  - `holdAction` : if the keys seperator is `=>` sign\r\n         * \r\n         * also the function does fix the shortcut in some parts! \r\n         * you don't usually invoke this function as it's used internally.\r\n         * @method Qway#supervise\r\n         * @param {string} shortcut \r\n         * @returns {Array} if shortcut fit the terms then it returned in an array otherwise\r\n         * false is returned! \r\n         */\r\n        supervise : function( shortcut ){\r\n\r\n            if(shortcut.indexOf(',') !== -1 && (shortcut.indexOf('+') !== -1 || shortcut.indexOf('=>') !== -1))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if(shortcut.indexOf('+') !== -1 && (shortcut.indexOf(',') !== -1 || shortcut.indexOf('=>') !== -1))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if(shortcut.indexOf('=>') !== -1 && (shortcut.indexOf('+') !== -1 || shortcut.indexOf(',') !== -1))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            var error = false;\r\n            \r\n            if(shortcut.indexOf('+') !== -1)\r\n            {\r\n                shortcut = shortcut.split('+');\r\n                for (let i = 0; i < shortcut.length; i++) {\r\n\r\n                    if(shortcut[i] === 'control')\r\n                    {\r\n                        shortcut[i] = 'ctrl';\r\n                    }\r\n\r\n                    if(shortcut[i] === ' ')\r\n                    {\r\n                        shortcut[i] = 'space';\r\n                    }\r\n\r\n                    shortcut[i] = shortcut[i].toLowerCase();\r\n\r\n                    if(this.KEYS.indexOf(shortcut[i]) === -1)\r\n                    {\r\n                        error = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                return error ? false : shortcut; \r\n\r\n            }\r\n            else if(shortcut.indexOf(',') !== -1)\r\n            {\r\n                shortcut = shortcut.split(',');\r\n                var res = [];\r\n                for (let i = 0; i < shortcut.length; i++) {\r\n                    var key;\r\n                    \r\n                    key = shortcut[i] === ' ' ? 'space' : shortcut[i].trim().toLowerCase();\r\n                    key = key === 'control' ? 'ctrl' : key;\r\n\r\n                    if(key.indexOf('*') !== -1)\r\n                    {\r\n                        key = key.split('*');\r\n                        times = parseFloat(key[1]);\r\n                        name = key[0].trim();\r\n\r\n                        if(this.KEYS.indexOf(name) === -1)\r\n                        {\r\n                            error = true;\r\n                            break;\r\n                        }\r\n\r\n                        for (let j = 0; j < times; j++) {\r\n                            res.push(name);\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        res.push(key);\r\n                        if(this.KEYS.indexOf(key) === -1)\r\n                        {\r\n                            error = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return error ? false : res;\r\n            }\r\n            else if(shortcut.indexOf('=>') !== -1)\r\n            {\r\n                shortcut = shortcut.split('=>');\r\n                var duration = parseFloat(shortcut[1]);\r\n                var key = shortcut[0];\r\n\r\n                key = key === ' ' ? 'space' : key.trim().toLowerCase();\r\n                key = key === 'control' ? 'ctrl' : key;\r\n                \r\n\r\n                if(this.KEYS.indexOf(key) === -1)\r\n                {\r\n                    return false;\r\n                }\r\n\r\n                return this.KEYS.indexOf(key) === -1 ? false : [key,duration]\r\n            }\r\n            else\r\n            {\r\n                shortcut = shortcut === ' ' ? 'space' : shortcut.trim().toLowerCase();\r\n                shortcut = shortcut === 'control' ? 'ctrl' : shortcut;\r\n                \r\n\r\n                return this.KEYS.indexOf(shortcut) === -1 ? false : {\r\n                    shortcut : shortcut,\r\n                    callback : null\r\n                };\r\n            }\r\n        },\r\n        /**\r\n         * Returns an object that can be easily saved inside a JSON file, this helps saving \r\n         * the user preferences if you are creating an app! \r\n         * \r\n         * also the function `initiate` suppose to take as parameter the return of this function\r\n         * as to load back the state.\r\n         * @method Qway#pack\r\n         * @returns {object}\r\n         */\r\n        pack : function(){\r\n            return {\r\n                duplicates : this.duplicates,\r\n                shortcut : this.shortcutslist,\r\n                holdingActions : this.holdingActions,\r\n                shortcutActivated : this.shortcutActivated,\r\n                comboActivated : this.comboActivated,\r\n                combo : this.combo\r\n            }\r\n        },\r\n        /**\r\n         * Load the shortcut list and the combo and all preferences from an object, usually this \r\n         * object is parsed from a JSON file, as to save and load back the state.\r\n         * @method Qway#initiate\r\n         * @param {object} obj \r\n         */\r\n        initiate : function(obj){\r\n            this.duplicates = obj.duplicates || false;\r\n            this.shortcutslist = obj.shortcut || [];\r\n            this.combo = obj.combo || [];\r\n            this.holdingActions = obj.holdingActions || [];\r\n            this.comboActivated = obj.comboActivated || true;\r\n            this.shortcutActivated = obj.shortcutActivated || true;\r\n        },\r\n        /**\r\n         * Used to handle window blur event, invoked internally by the system\r\n         * @method Qway#blur\r\n         */\r\n        blur : function(){\r\n            for (let i = 0; i < this.shortcutslist.length; i++) {\r\n                this.shortcutslist[i].progress.fill(false,0,this.shortcutslist[i].progress.length);\r\n            }\r\n            for (let i = 0; i < this.combo.length; i++) {\r\n                this.combo[i].progress = '';\r\n            }\r\n            for (let i = 0; i < this.holdingActions.length; i++) {\r\n                if(this.holdingActions[i].timeout !== null)\r\n                {\r\n                    clearTimeout(this.holdingActions[i].timeout);\r\n                    this.holdingActions[i].timeout = null;\r\n                }\r\n            }\r\n            \r\n            this.intercativeMode = false;\r\n            this.toBuild = [[],[]];\r\n        }\r\n    }\r\n    \r\n    return qway;\r\n}))\r\n"],"names":["qwayExports","root","Qway","this","undefined","findIndex","Array","prototype","callback","res","i","length","element","out","qway","duplicates","_this","shortcutslist","combo","holdingActions","KEYS","shortcutActivated","comboActivated","intercativeMode","toBuild","QEF","keysuite","window","addEventListener","e","handleKeydown","call","handleKeyup","blur","approve","shortcut","join","bind","approveToReplace","obj","find","a","toString","exist","check","unbind","abort","resetCombo","supervise","index","progress","done","toggleCombo","state","active","toggleShortcut","replace","getFromUser","shortcutLength","func1","push","stopGettingFromUser","key","toLowerCase","trim","forEach","item","indexOf","timeout","clearTimeout","j","preventDefault","setTimeout","timing","splice","lastIndexOf","duration","shortcuti","fill","console","warn","findANDdeleted","action","error","split","times","parseFloat","name","pack","initiate","module","exports","getDefaultExportFromCjs"],"mappings":"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"}